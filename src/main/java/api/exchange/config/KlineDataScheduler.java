package api.exchange.config;

import api.exchange.services.CoinDataService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

@Component
public class KlineDataScheduler {

    @Autowired
    private CoinDataService coinDataService;

    /**
     * L·∫•y d·ªØ li·ªáu kline 1m m·ªói ph√∫t
     * Ch·∫°y v√†o gi√¢y 0 c·ªßa m·ªói ph√∫t
     */
    @Scheduled(cron = "0 * * * * *")
    public void fetchMinuteData() {
        System.out.println("üîÑ Fetching 1m data at: " + java.time.LocalDateTime.now());

        try {
            coinDataService.fetchAndSaveAllKlineData1m();
        } catch (Exception e) {
            System.err.println("‚ùå Error in 1m data fetch: " + e.getMessage());
        }
    }

    /**
     * L·∫•y d·ªØ li·ªáu kline 1h m·ªói gi·ªù
     * Ch·∫°y v√†o ph√∫t 0 c·ªßa m·ªói gi·ªù
     */
    @Scheduled(cron = "0 0 * * * *")
    public void fetchHourlyData() {
        System.out.println("üîÑ Fetching 1h data at: " + java.time.LocalDateTime.now());

        try {
            coinDataService.fetchAndSaveAllKlineData1h();
        } catch (Exception e) {
            System.err.println("‚ùå Error in 1h data fetch: " + e.getMessage());
        }
    }

    /**
     * L·∫•y d·ªØ li·ªáu ban ƒë·∫ßu khi ·ª©ng d·ª•ng kh·ªüi ƒë·ªông
     * Ch·∫°y sau khi ·ª©ng d·ª•ng kh·ªüi ƒë·ªông 30 gi√¢y
     */
    @Scheduled(initialDelay = 30000, fixedDelay = Long.MAX_VALUE)
    public void fetchInitialData() {

        try {
            // L·∫•y th√¥ng tin coin ban ƒë·∫ßu
            coinDataService.fetchAndSaveAllCoinInfo();

            // L·∫•y d·ªØ li·ªáu 1m ban ƒë·∫ßu
            coinDataService.fetchAndSaveAllKlineData1m();

            // L·∫•y d·ªØ li·ªáu 1h ban ƒë·∫ßu
            coinDataService.fetchAndSaveAllKlineData1h();

        } catch (Exception e) {
            System.err.println("‚ùå Error in initial data fetch: " + e.getMessage());
        }
    }

    /**
     * D·ªçn d·∫πp d·ªØ li·ªáu c≈© m·ªói ng√†y l√∫c 2:00 AM
     * X√≥a d·ªØ li·ªáu c≈© h∆°n 7 ng√†y
     */
    @Scheduled(cron = "0 0 2 * * *")
    public void cleanupOldData() {
        System.out.println("üßπ Cleaning up old data at: " + java.time.LocalDateTime.now());

        try {
            // X√≥a d·ªØ li·ªáu 1m c≈© h∆°n 7 ng√†y
            java.time.LocalDateTime cutoffTime1m = java.time.LocalDateTime.now().minusDays(7);
            // Note: C·∫ßn implement cleanup method trong repository

            // X√≥a d·ªØ li·ªáu 1h c≈© h∆°n 30 ng√†y
            java.time.LocalDateTime cutoffTime1h = java.time.LocalDateTime.now().minusDays(30);
            // Note: C·∫ßn implement cleanup method trong repository

            System.out.println("‚úÖ Old data cleanup completed");
        } catch (Exception e) {
            System.err.println("‚ùå Error in data cleanup: " + e.getMessage());
        }
    }
}
